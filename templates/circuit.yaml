spec:
  templates:
    # Generate random parameters for an ansatz
    - name: generate-random-ansatz-params
      parent: generic-task
      inputs:
        parameters:
          - name: ansatz-specs
            default: None
          - name: number-of-params
            default: None
          - name: min-val
            default: "-0.01"
          - name: max-val
            default: "0.01"
          - name: seed
            default: None
          - name: command
            value: python3 main_script.py
        artifacts:
          - name: main-script
            path: /app/main_script.py
            raw:
              data: |
                import numpy as np
                from zquantum.core.circuit import save_circuit_template_params
                from zquantum.core.utils import create_object
                if {{inputs.parameters.ansatz-specs}} is not None:
                  ansatz_specs = {{inputs.parameters.ansatz-specs}}
                  ansatz = create_object(ansatz_specs)
                  number_of_params = ansatz.number_of_params
                elif {{inputs.parameters.number-of-params}} is not None:
                  number_of_params = {{inputs.parameters.number-of-params}}
                if {{inputs.parameters.seed}} is not None:
                  np.random.seed({{inputs.parameters.seed}})
                params = np.random.uniform({{inputs.parameters.min-val}}, {{inputs.parameters.max-val}}, number_of_params)
                save_circuit_template_params(params, 'params.json')
      outputs:
        artifacts:
          - name: params
            path: /app/params.json

    # Combine ansatz parameter
    - name: combine-ansatz-params
      parent: generic-task
      inputs:
        parameters:
          - name: command
            value: python3 main_script.py
        artifacts:
          - name: params1
            path: /app/params1.json
          - name: params2
            path: /app/params2.json
          - name: main-script
            path: /app/main_script.py
            raw:
              data: |
                from zquantum.core.circuit import combine_ansatz_params, load_circuit_template_params, save_circuit_template_params
                params1 = load_circuit_template_params('params1.json')
                params2 = load_circuit_template_params('params2.json')
                combined_params = combine_ansatz_params(params1, params2)
                save_circuit_template_params(combined_params, 'combined_params.json')
      outputs:
        artifacts:
          - name: combined-params
            path: /app/combined_params.json

    # Build circuit for ansatz
    - name: build-ansatz-circuit
      parent: generic-task
      inputs:
        parameters:
          - name: ansatz-specs
          - name: command
            value: python3 main_script.py
        artifacts:
          - name: params
            optional: True
            path: /app/params.json
          - name: main-script
            path: /app/main_script.py
            raw:
              data: |
                from zquantum.core.utils import create_object
                from zquantum.core.circuit import (load_circuit_template_params,
                                                  save_circuit)
                import os
                ansatz = create_object({{inputs.parameters.ansatz-specs}})
                if os.path.exists('params.json'):
                  params = load_circuit_template_params('params.json')
                else:
                  params = None

                if params is not None:
                  circuit = ansatz.get_executable_circuit(params)
                elif ansatz.supports_parametrized_circuits:
                  circuit = ansatz.parametrized_circuit
                else:
                  raise(Exception("Ansatz is not parametrizable and no parameters has been provided."))
                save_circuit(circuit, 'circuit.json')
      outputs:
        artifacts:
          - name: circuit
            path: /app/circuit.json

    # Build uniform parameter grid
    - name: build-uniform-parameter-grid
      parent: generic-task
      inputs:
        parameters:
          - name: ansatz-specs
            default: None
          - name: number-of-params-per-layer
            default: None
          - name: n-layers
            default: "1"
          - name: min-value
          - name: max-value
          - name: step
          - name: command
            value: python3 main_script.py
        artifacts:
          - name: main-script
            path: /app/main_script.py
            raw:
              data: |
                from zquantum.core.circuit import (save_parameter_grid,
                                                   build_uniform_param_grid)
                from zquantum.core.utils import create_object
                if {{inputs.parameters.ansatz-specs}} is not None:
                  ansatz_specs = {{inputs.parameters.ansatz-specs}}
                  ansatz = create_object(ansatz_specs)
                  number_of_params = ansatz.number_of_params
                elif {{inputs.parameters.number-of-params-per-layer}} is not None:
                  number_of_params = {{inputs.parameters.number-of-params-per-layer}}

                grid = build_uniform_param_grid(number_of_params,
                                                    {{inputs.parameters.n-layers}},
                                                    {{inputs.parameters.min-value}},
                                                    {{inputs.parameters.max-value}},
                                                    {{inputs.parameters.step}})
                save_parameter_grid(grid, 'parameter_grid.json')
      outputs:
        artifacts:
          - name: parameter-grid
            path: /app/parameter_grid.json

    - name: build-circuit-layers-and-connectivity
      parent: generic-task
      inputs:
        parameters:
          - name: x-dimension
          - name: y-dimension
            default: "None"
          - name: layer-type
            default: "nearest-neighbor"
          - name: command
            value: python3 main_script.py
        artifacts:
          - name: main-script
            path: /app/main_script.py
            raw:
              data: |
                from zquantum.core.circuit import (save_circuit_layers,
                                                   save_circuit_connectivity,
                                                   build_circuit_layers_and_connectivity)
                connectivity, layers = build_circuit_layers_and_connectivity(
                                                    {{inputs.parameters.x-dimension}},
                                                    {{inputs.parameters.y-dimension}},
                                                    '{{inputs.parameters.layer-type}}')
                save_circuit_layers(layers, 'circuit_layers.json')
                save_circuit_connectivity(connectivity, 'circuit_connectivity.json')
      outputs:
        artifacts:
          - name: circuit-layers
            path: /app/circuit_layers.json
          - name: circuit-connectivity
            path: /app/circuit_connectivity.json

    - name: create-random-circuit
      parent: generic-task
      inputs:
        parameters:
          - name: num-qubits
          - name: num-gates
          - name: seed
            default: "None"
          - name: command
            value: python3 main_script.py
        artifacts:
          - name: main-script
            path: /app/main_script.py
            raw:
              data: |
                from zquantum.core.circuit import save_circuit
                from zquantum.core.testing import create_random_circuit
                circuit = create_random_circuit({{inputs.parameters.num-qubits}},
                  {{inputs.parameters.num-gates}}, seed={{inputs.parameters.seed}})
                save_circuit(circuit, "circuit.json")
      outputs:
        artifacts:
          - name: circuit
            path: /app/circuit.json

    # Add register of ancilla qubits to circuit
    - name: add-ancilla-qubits-register-to-circuit
      parent: generic-task
      inputs:
        parameters:
          - name: n-ancilla-qubits
          - name: command
            value: python3 main_script.py
        artifacts:
          - name: circuit
            path: /app/circuit.json
          - name: main-script
            path: /app/main_script.py
            raw:
              data: |
                from zquantum.core.circuit import load_circuit, add_ancilla_register_to_circuit, save_circuit

                circuit = load_circuit("circuit.json")
                extended_circuit = add_ancilla_register_to_circuit(circuit, int({{inputs.parameters.n-ancilla-qubits}}))
                save_circuit(extended_circuit,"extended_circuit.json")
      outputs:
        artifacts:
          - name: extended-circuit
            path: /app/extended_circuit.json

    # Combine circuits in a circuitset to create a composite circuit
    - name: concatenate-circuits
      parent: generic-task
      inputs:
        parameters:
          - name: command
            value: python3 main_script.py
        artifacts:
          - name: circuit-set
            path: /app/circuit_set.json
          - name: main-script
            path: /app/main_script.py
            raw:
              data: |
                from zquantum.core.circuit import load_circuit_set, save_circuit, Circuit
                circuit_set  = load_circuit_set('circuit_set.json')
                result_circuit = Circuit()
                for circuit in circuit_set:
                  result_circuit += circuit
                save_circuit(result_circuit, 'circuit.json')
      outputs:
        artifacts:
          - name: circuit
            path: /app/circuit.json

    # Create circuit set from circuit artifacts
    - name: create-circuit-set-from-circuit-artifacts
      parent: generic-task
      inputs:
        parameters:
          - name: command
            value: python3 main_script.py
        artifacts:
          - name: circuit-1
            path: /app/circuit1.json
          - name: circuit-2
            path: /app/circuit2.json
            optional: true
          - name: circuit-3
            path: /app/circuit3.json
            optional: true
          - name: circuit-4
            path: /app/circuit4.json
            optional: true
          - name: circuit-5
            path: /app/circuit5.json
            optional: true
          - name: circuit-6
            path: /app/circuit6.json
            optional: true
          - name: circuit-7
            path: /app/circuit7.json
            optional: true
          - name: circuit-8
            path: /app/circuit8.json
            optional: true
          - name: circuit-set
            path: /app/circuit_set_in.json
            optional: true
          - name: main-script
            path: /app/main_script.py
            raw:
              data: |
                import os
                from zquantum.core.circuit import load_circuit_set, load_circuit, save_circuit_set

                if os.path.exists('circuit_set_in.json'):
                  circuit_set = load_circuit_set('circuit_set_in.json')
                else:
                  circuit_set = []

                filenames = ["circuit1.json", "circuit2.json", "circuit3.json", "circuit4.json", "circuit5.json", "circuit6.json", "circuit7.json", "circuit8.json"]
                for file in filenames:
                  if os.path.exists(file):
                    circuit_set.append(load_circuit(file))

                save_circuit_set(circuit_set,"circuit_set.json")
      outputs:
        artifacts:
          - name: circuit-set
            path: /app/circuit_set.json

    - name: create-one-qubit-circuit
      parent: generic-task
      inputs:
        parameters:
          - name: ry-parameter-1
          - name: rz-parameter
          - name: ry-parameter-2
          - name: command
            value: python3 main_script.py
        artifacts:
          - name: main-script
            path: /app/main_script.py
            raw:
              data: |
                from zquantum.core.circuit import Circuit, Gate, Qubit,  save_circuit

                circuit = Circuit()
                circuit.qubits = [Qubit(0)]
                ry_parameter_1 = float({{inputs.parameters.ry-parameter-1}})
                rz_parameter = float({{inputs.parameters.rz-parameter}})
                ry_parameter_2 = float({{inputs.parameters.ry-parameter-2}})

                gates = [Gate('Ry', qubits=[Qubit(0)], params = [ry_parameter_1]), Gate('Rz', qubits=[Qubit(0)], params = [rz_parameter]), Gate('Ry', qubits=[Qubit(0)], params = [ry_parameter_2]) ]
                circuit.gates = gates
                save_circuit(circuit, 'circuit.json')

      outputs:
        artifacts:
          - name: circuit
            path: /app/circuit.json

    - name: create-two-qubit-molecular-hydrogen-circuit
      parent: generic-task
      inputs:
        parameters:
          - name: rz-parameter
          - name: command
            value: python3 main_script.py
        artifacts:
          - name: main-script
            path: /app/main_script.py
            raw:
              data: |
                from zquantum.core.circuit import Gate, Qubit, Circuit,  save_circuit
                import numpy as np

                # Two-qubit ansatz
                ansatz_circuit2Q = Circuit()
                ansatz_circuit2Q.qubits = [Qubit(0), Qubit(1)]
                # Ansatz from Chem Review paper
                rz_parameter = float({{inputs.parameters.rz-parameter}})
                ansatz_circuit2Q.gates = [Gate('Rx', qubits=[Qubit(0)], params = [np.pi]),
                                        Gate('Rx', qubits=[Qubit(0)], params = [-np.pi/2]),
                                        Gate('Ry', qubits=[Qubit(1)], params = [np.pi/2]),
                                        Gate("CNOT", qubits=[Qubit(1), Qubit(0)]),
                                        Gate('Rz', qubits=[Qubit(0)], params = [rz_parameter]),
                                        Gate("CNOT", qubits=[Qubit(1), Qubit(0)]),
                                        Gate('Rx', qubits=[Qubit(0)], params = [np.pi/2]),
                                        Gate('Ry', qubits=[Qubit(1)], params = [-np.pi/2]),]
                save_circuit(ansatz_circuit2Q, 'circuit.json')
      outputs:
        artifacts:
          - name: circuit
            path: /app/circuit.json
