spec:
  templates:
  # get number operator
  - name: get-number-operator
    parent: generic-task
    inputs:
      parameters:
      - name: n-qubits
      - name: n-particles
        default: None
      - name: command
        value: python3 main_script.py
      artifacts:
      - name: main-script
        path: /app/main_script.py
        raw:
          data: |
            from zquantum.core.openfermion import get_fermion_number_operator, save_interaction_operator
            number_op = get_fermion_number_operator({{inputs.parameters.n-qubits}}, {{inputs.parameters.n-particles}})
            save_interaction_operator(number_op, 'number-op.json')
    outputs:
      artifacts:
      - name: number-op
        path: /app/number-op.json

  # get diagonal component
  - name: get-diagonal-component
    parent: generic-task
    inputs:
      parameters:
      - name: command
        value: python3 main_script.py
      artifacts:
      - name: interaction-op
        path: /app/interaction_op.json
      - name: main-script
        path: /app/main_script.py
        raw:
          data: |
            from zquantum.core.openfermion import (get_diagonal_component, save_interaction_operator, 
                                       load_interaction_operator)
            interaction_op = load_interaction_operator('interaction_op.json')
            diagonal_op, remainder_op = get_diagonal_component(interaction_op)
            save_interaction_operator(diagonal_op, 'diagonal_op.json')
            save_interaction_operator(remainder_op, 'remainder_op.json')
    outputs:
      artifacts:
      - name: diagonal-op
        path: /app/diagonal_op.json
      - name: remainder-op
        path: /app/remainder_op.json

  # get interpolation between two qubit operators
  - name: interpolate-qubit-operators
    parent: generic-task
    inputs:
      parameters:
      - name: epsilon
        default: 0.5
      - name: command
        value: python3 main_script.py
      artifacts:
      - name: reference-qubit-operator
        path: /app/reference-qubit-operator.json
      - name: target-qubit-operator
        path: /app/target-qubit-operator.json
      - name: main-script
        path: /app/main_script.py
        raw:
          data: |
            from zquantum.core.openfermion import load_qubit_operator, save_qubit_operator
            reference_qubit_operator = load_qubit_operator('reference-qubit-operator.json')
            target_qubit_operator = load_qubit_operator('target-qubit-operator.json')
            epsilon = {{inputs.parameters.epsilon}}
            if epsilon > 1.0 or epsilon < 0.0:
              raise ValueError("epsilon must be in the range [0.0, 1.0]")
            output_qubit_operator = epsilon * target_qubit_operator + (1.0 - epsilon) * reference_qubit_operator
            save_qubit_operator(output_qubit_operator, 'output_qubit_operator.json')
    outputs:
      artifacts:
      - name: output-qubit-operator
        path: /app/output_qubit_operator.json