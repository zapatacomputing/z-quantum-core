spec:
  templates:
    # Run a circuit and return a list of measurements
    - name: run-circuit-and-measure
      parent: generic-task
      inputs:
        parameters:
          - name: backend-specs
          - name: command
            value: bash main_script.sh
        artifacts:
          - name: circuit
            path: /app/circuit.json
          - name: noise-model
            path: /app/noise_model.json
            optional: True
          - name: device-connectivity
            path: /app/device_connectivity.json
            optional: True
          - name: main-script
            path: /app/main_script.sh
            raw:
              data: |
                qvm -S &
                quilc -S &
                source /app/usr/local/bin/compilers_and_libraries.sh
                python3 python_script.py
          - name: python-script
            path: /app/python_script.py
            raw:
              data: |
                from zquantum.core.utils import create_object, load_noise_model
                from zquantum.core.circuit import load_circuit, load_circuit_connectivity
                import os

                circuit = load_circuit('circuit.json')

                backend_specs = {{inputs.parameters.backend-specs}}
                if os.path.isfile('noise_model.json'):
                  backend_specs["noise_model"] = load_noise_model("noise_model.json")
                if os.path.isfile("device_connectivity.json"):
                    backend_specs["device_connectivity"] = load_circuit_connectivity(
                        "device_connectivity.json"
                    )
                backend = create_object(backend_specs)

                measurements = backend.run_circuit_and_measure(circuit)

                measurements.save("measurements.json")
      outputs:
        artifacts:
          - name: measurements
            path: /app/measurements.json

    - name: get-bitstring-distribution
      parent: generic-task
      inputs:
        parameters:
          - name: backend-specs
          - name: command
            value: bash main_script.sh
        artifacts:
          - name: circuit
            path: /app/circuit.json
          - name: noise-model
            path: /app/noise_model.json
            optional: True
          - name: device-connectivity
            path: /app/device_connectivity.json
            optional: True
          - name: main-script
            path: /app/main_script.sh
            raw:
              data: |
                qvm -S &
                quilc -S &
                source /app/usr/local/bin/compilers_and_libraries.sh
                python3 python_script.py
          - name: python-script
            path: /app/python_script.py
            raw:
              data: |
                from zquantum.core.utils import create_object, load_noise_model
                from zquantum.core.circuit import load_circuit, load_circuit_connectivity
                from zquantum.core.bitstring_distribution import save_bitstring_distribution
                import os

                circuit = load_circuit('circuit.json')

                backend_specs = {{inputs.parameters.backend-specs}}
                if os.path.isfile('noise_model.json'):
                  backend_specs["noise_model"] = load_noise_model("noise_model.json")
                if os.path.isfile("device_connectivity.json"):
                    backend_specs["device_connectivity"] = load_circuit_connectivity(
                        "device_connectivity.json"
                    )
                backend = create_object(backend_specs)

                bitstring_distribution = backend.get_bitstring_distribution(circuit)

                save_bitstring_distribution(bitstring_distribution,"bitstring_distribution.json")
      outputs:
        artifacts:
          - name: bitstring-distribution
            path: /app/bitstring_distribution.json

    - name: evaluate-ansatz-based-cost-function
      parent: generic-task
      inputs:
        parameters:
          - name: ansatz-specs
          - name: backend-specs
          - name: cost-function-specs
          - name: command
            value: bash main_script.sh
        artifacts:
          - name: ansatz-parameters
            path: /app/ansatz_parameters.json
          - name: qubit-operator
            path: /app/qubitop.json
          - name: noise-model
            path: /app/noise_model.json
            optional: True
          - name: device-connectivity
            path: /app/device_connectivity.json
            optional: True
          - name: main-script
            path: /app/main_script.sh
            raw:
              data: |
                qvm -S &
                quilc -S &
                source /app/usr/local/bin/compilers_and_libraries.sh
                python3 python_script.py
          - name: python-script
            path: /app/python_script.py
            raw:
              data: |
                import os
                from zquantum.core.circuit import load_circuit_template_params, load_circuit_connectivity
                from qeopenfermion import load_qubit_operator
                from zquantum.core.utils import create_object, load_noise_model, save_value_estimate
                import json

                ansatz_parameters = load_circuit_template_params('ansatz_parameters.json')

                # Load qubit op
                operator = load_qubit_operator('qubitop.json')
                ansatz_specs = {{inputs.parameters.ansatz-specs}}
                if ansatz_specs['function_name'] == 'QAOAFarhiAnsatz':
                  ansatz = create_object(ansatz_specs, cost_hamiltonian=operator)
                else:
                  ansatz = create_object(ansatz_specs)
                  
                backend_specs = {{inputs.parameters.backend-specs}}
                if os.path.isfile('noise_model.json'):
                  backend_specs["noise_model"] = load_noise_model("noise_model.json")
                if os.path.isfile("device_connectivity.json"):
                    backend_specs["device_connectivity"] = load_circuit_connectivity(
                        "device_connectivity.json"
                    )
                backend = create_object(backend_specs)
                cost_function_specs = {{inputs.parameters.cost-function-specs}}
                estimator_specs = cost_function_specs.pop("estimator-specs", None)
                if estimator_specs is not None:
                  cost_function_specs["estimator"] = create_object(estimator_specs)
                cost_function_specs["target_operator"] = operator
                cost_function_specs["ansatz"] = ansatz
                cost_function_specs["backend"] = backend
                cost_function = create_object(cost_function_specs)

                value_estimate = cost_function.evaluate(ansatz_parameters)

                save_value_estimate(value_estimate, 'value_estimate.json')
      outputs:
        artifacts:
          - name: value-estimate
            path: /app/value_estimate.json

    - name: get-expectation-values-from-rdms
      parent: generic-task
      inputs:
        parameters:
          - name: sort-terms
            default: "False"
          - name: command
            value: bash main_script.sh
        artifacts:
          - name: qubit-operator
            path: /app/qubitop.json
          - name: interaction-rdm
            path: /app/interactionrdm.json
          - name: main-script
            path: /app/main_script.sh
            raw:
              data: |
                python3 python_script.py
          - name: python-script
            path: /app/python_script.py
            raw:
              data: |
                from qeopenfermion import load_qubit_operator, load_interaction_rdm
                from zquantum.core.measurement import save_expectation_values
                from zquantum.core.hamiltonian import get_expectation_values_from_rdms

                # Load qubit op
                operator = load_qubit_operator('qubitop.json')
                rdm = load_interaction_rdm('interactionrdm.json')
                expecval = get_expectation_values_from_rdms(interactionrdm=rdm,
                           qubitoperator=operator, sort_terms = {{inputs.parameters.sort-terms}})
                  
                save_expectation_values(expecval, 'expectation_values.json')
      outputs:
        artifacts:
          - name: expectation-values
            path: /app/expectation_values.json

    - name: hamiltonian-analysis
      parent: generic-task
      inputs:
        parameters:
          - name: decomposition-method
            default: "greedy" # or 'greedy-sorted'
          - name: command
            value: bash main_script.sh
        artifacts:
          - name: qubit-operator
            path: /app/qubitop.json
          - name: expectation-values
            path: /app/expectation_values.json
            optional: True
          - name: main-script
            path: /app/main_script.sh
            raw:
              data: |
                python3 python_script.py
          - name: python-script
            path: /app/python_script.py
            raw:
              data: |
                from qeopenfermion import load_qubit_operator
                from zquantum.core.measurement import load_expectation_values
                from zquantum.core.hamiltonian import estimate_nmeas
                from zquantum.core.utils import save_nmeas_estimate
                import os

                # Load qubit op
                operator = load_qubit_operator('qubitop.json')
                if os.path.isfile('expectation_values.json'):
                  expecval = load_expectation_values("expectation_values.json")
                else:
                  expecval = None

                K, nterms, frame_meas = estimate_nmeas(target_operator=operator,
                           decomposition_method = '{{inputs.parameters.decomposition-method}}',
                           expecval=expecval)
                  
                save_nmeas_estimate(nmeas=K, nterms=nterms, frame_meas=frame_meas, filename='hamiltonian_analysis.json')
      outputs:
        artifacts:
          - name: hamiltonian-analysis
            path: /app/hamiltonian_analysis.json
